{
	"info": {
		"_postman_id": "2c5556ef-9ff2-4976-a67c-1c034aa1ee3d",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*Требования:\r",
							"\r",
							"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"*/\r",
							"\r",
							"const age = pm.iterationData.get ('age');\r",
							"const name = pm.iterationData.get ('name');\r",
							"const salary = pm.iterationData.get ('salary')\r",
							"\r",
							"function ageValidation(value){\r",
							"    return value && !isNaN(value) && value>17 && value <121 && Number.isInteger(+value)\r",
							"}\r",
							"function salaryValidation(value){\r",
							"    return value && !isNaN(value) && value>0 && value <1000001 && Number.isInteger(+value)\r",
							"}\r",
							" \r",
							"function nameValidation(value){\r",
							"    return value && value.length >2 && value.length<41 && value.trim() === value\r",
							"}\r",
							"\r",
							"function validate(name, age, salary){\r",
							"   return ageValidation(age) && salaryValidation(salary) && nameValidation(name)\r",
							"}\r",
							"\r",
							"if(validate(name, age, salary)){\r",
							"    pm.test(`200 code with age == ${age}, salary == ${salary} and name == ${name}`,() => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"} else {\r",
							"     pm.test(`Not 200 code with age == ${age}, salary == ${salary} and name == ${name}`,() => {\r",
							"        pm.response.to.not.have.status(200);\r",
							"     \r",
							"})\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const respSalary = pm.response.json().salary\r",
							"\r",
							"const reqSalary = +pm.request.url.query.get('salary')\r",
							"\r",
							"respSalary.forEach((salary, index) => {\r",
							"    pm.test(`${reqSalary} * ${index+1} ===${salary}`, () =>{\r",
							"        pm.expect(reqSalary*(index+1)). to.eql(+salary)\r",
							"    })\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const reqObject = pm.request.url.query.toObject()\r",
							"\r",
							"const respObject = {\r",
							"    age: String(pm.response.json().age),\r",
							"    name: pm.response.json().name,\r",
							"    salary: String(pm.response.json().salary)\r",
							"}\r",
							"pm.test ('Compare request object and response object', () => {\r",
							"    pm.expect(reqObject). to.eql(reqObject)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//4.1 Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"const keyisInJson = ['start_qa_salary', 'qa_salary_after_6_months', 'qa_salary_after_12_months', 'qa_salary_after_1.5_year', 'qa_salary_after_3.5_years', 'person']\r",
							"let resp = pm.response.json()\r",
							"\r",
							"keyisInJson.forEach(key => {\r",
							"    pm.test(`Rsponce has ${key}`, () =>{\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"    } )\r",
							"})\r",
							"//4.2 Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"const salary = pm.environment.get('salary')\r",
							"const counters = {\r",
							"    'start_qa_salary': 1,\r",
							"    'qa_salary_after_6_months': 2,\r",
							"    'qa_salary_after_3.5_years': 3.8,\r",
							"    'qa_salary_after_12_months': 2.7,\r",
							"    'qa_salary_after_1.5_year' : 3.3\r",
							"}\r",
							"\r",
							"for(const key in counters){\r",
							"pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {\r",
							"    pm.expect(+resp[key]).to.eql(salary*counters[key])\r",
							"})\r",
							"}\r",
							"//4.3 Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"\r",
							"counters['person'] = ''\r",
							"for(const key in counters){\r",
							"    pm.test(`Rsponce has ${key}`, () =>{\r",
							"    pm.expect(resp).to.have.property(key)\r",
							"    })\r",
							"    if(key != 'person'){\r",
							"    pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {\r",
							"    pm.expect(+resp[key]).to.eql(salary*counters[key])\r",
							"})   \r",
							"    }\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}

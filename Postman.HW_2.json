{
	"info": {
		"_postman_id": "b756735e-0735-4ad4-ae67-f290f6868146",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json;\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Hello!!\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверить, что name в ответе равно name s request\r",
							"    pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Elena\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request \r",
							"    pm.test(\"Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('38');\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request\r",
							"    pm.test(\"Salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"//  Спарсить request\r",
							"let req = request.data;\r",
							"// Проверить, что name в ответе равно name s request\r",
							"pm.test(\"Name is body\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request\r",
							"pm.test(\"Age is body\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"Salary is body\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family);\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4\r",
							"pm.test(\"u_salary_1_5_year\", function(){\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Elena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "38",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Name is url\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(req.name)});\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request)   \r",
							" pm.test(\"Age is url\", function(){\r",
							" pm.expect(jsonData.age).to.eql(req.age)});\r",
							"//  Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							" pm.test(\"Salary is url\", function(){\r",
							" pm.expect(jsonData.salary).to.eql(+ req.salary)});\r",
							"//  Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family);\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры name\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры age\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"pm.test(\"Проверить, что параметр name имеет значение Luky\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf([\"Luky\"])\r",
							"});\r",
							"pm.test(\"Проверить, что параметр age имеет значение 4\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4])\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Elena&age=38&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"pm.test(\"Проверить, что age в ответе равно age из request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"console.log(req.salary);\r",
							"console.log(jsonData.salary);\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"let salary_1 = jsonData.salary[0];\r",
							"console.log(salary_1);\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"let salary_2 = jsonData.salary[1];\r",
							"console.log(salary_2);\r",
							"//  Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"let salary_3 = jsonData.salary[2];\r",
							"console.log(salary_3);\r",
							"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request\", function(){\r",
							"    pm.expect(salary_1).to.eql(+req.salary);\r",
							"});\r",
							"pm.test(\"Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\", function(){\r",
							"    pm.expect(+salary_2).to.eql(req.salary*2);\r",
							"});\r",
							"pm.test(\"Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\", function(){\r",
							"    pm.expect(+salary_3).to.eql(req.salary*3);\r",
							"});\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (a = 0; a < jsonData.lenght; a++){\r",
							"console.log(\"Salary_cycle\", jsondata.salary[a]);    \r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"// Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property( \"start_qa_salary\");\r",
							"});\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property( \"qa_salary_after_6_months\");\r",
							"});\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property( \"qa_salary_after_12_months\");\r",
							"});\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property( \"qa_salary_after_1.5_year\");\r",
							"});\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property( \"qa_salary_after_3.5_years\");\r",
							"});\r",
							"pm.test(\"Проверить, что json response имеет параметр person\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"pm.test(\"Параметр start_qa_salary равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"pm.test(\"Параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"pm.test(\"Параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"pm.test(\"Параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"});\r",
							"pm.test(\"Параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
							"});\r",
							"pm.test(\"В параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"pm.test(\"Параметр u_age равен age из request (age забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"pm.test(\"Параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}